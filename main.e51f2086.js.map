{"version":3,"sources":["scripts/main.js"],"names":["contentDiv","document","createElement","firstReceivedH3","AllReceivedH3","ulFirstReceived","ulAllReceived","classList","add","body","appendChild","innerText","baseURL","controller","AbortController","timeoutId","setTimeout","abort","getData","url","fetchResponse","fetch","signal","then","response","ok","Promise","reject","Error","status","statusText","headers","get","includes","clearTimeout","json","result","phonesIDs","map","phone","id","getFirstReceivedDetails","getAllSuccessfulDetails","allPromisses","phoneID","phoneData","any","firstResolved","li","name","all","resolvedPhones"],"mappings":";AAAA,aAEA,IAAMA,EAAaC,SAASC,cAAc,MACpCC,EAAkBF,SAASC,cAAc,MACzCE,EAAgBH,SAASC,cAAc,MACvCG,EAAkBJ,SAASC,cAAc,MACzCI,EAAgBL,SAASC,cAAc,MAE7CF,EAAWO,UAAUC,IAAI,iBAAkB,kBAC3CP,SAASQ,KAAKC,YAAYV,GAE1BG,EAAgBQ,UAAY,iBAC5BP,EAAcO,UAAY,iBAE1BX,EAAWU,YAAYP,GACvBH,EAAWU,YAAYL,GACvBL,EAAWU,YAAYN,GACvBJ,EAAWU,YAAYJ,GAEvB,IAAMM,EAAU,4DACVC,EAAa,IAAIC,gBACjBC,EAAYC,WAAW,WAAMH,OAAAA,EAAWI,SAAS,KAEjDC,EAAU,SAACC,GAgBRC,OAfeC,MAAMF,EAAK,CAAEG,OAAQT,EAAWS,SACnDC,KAAK,SAACC,GAWEA,OAVFA,EAASC,IACZC,QAAQC,OAAOC,MAASJ,GAAAA,OAAAA,EAASK,OAAYL,OAAAA,OAAAA,EAASM,cAGnDN,EAASO,QAAQC,IAAI,gBAAgBC,SAAS,qBACjDP,QAAQC,OAAOC,MAAM,6BAGvBM,aAAanB,GAENS,EAASW,UAMtBjB,EAAWN,GAAAA,OAAAA,EAAX,iBAAkCW,KAAK,SAAAa,GAC/BC,IAAAA,EAAYD,EAAOE,IAAI,SAAAC,GAASA,OAAAA,EAAMC,KAE5CC,EAAwBJ,GACxBK,EAAwBL,KAG1B,IAAMI,EAA0B,SAACJ,GACzBM,IAAAA,EAAeN,EAAUC,IAAI,SAAAM,GAG1BC,OAFW3B,EAAWN,GAAAA,OAAAA,EAAkBgC,YAAAA,OAAAA,EAA/C,YAKFlB,QAAQoB,IAAIH,GAAcpB,KAAK,SAAAwB,GACvBC,IAAAA,EAAK/C,SAASC,cAAc,MAElC8C,EAAGrC,UAAeoC,GAAAA,OAAAA,EAAcP,GAAUO,SAAAA,OAAAA,EAAcE,MACxD5C,EAAgBK,YAAYsC,MAI1BN,EAA0B,SAACL,GACzBM,IAAAA,EAAeN,EAAUC,IAAI,SAAAM,GAG1BC,OAFW3B,EAAWN,GAAAA,OAAAA,EAAkBgC,YAAAA,OAAAA,EAA/C,YAKFlB,QAAQwB,IAAIP,GAAcpB,KAAK,SAAA4B,GAC7BA,EAAeb,IAAI,SAAAC,GACXS,IAAAA,EAAK/C,SAASC,cAAc,MAElC8C,EAAGrC,UAAe4B,GAAAA,OAAAA,EAAMC,GAAUD,SAAAA,OAAAA,EAAMU,MACxC3C,EAAcI,YAAYsC","file":"main.e51f2086.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst contentDiv = document.createElement('dv');\nconst firstReceivedH3 = document.createElement('h3');\nconst AllReceivedH3 = document.createElement('h3');\nconst ulFirstReceived = document.createElement('ul');\nconst ulAllReceived = document.createElement('ul');\n\ncontentDiv.classList.add('first-received', 'all-successful');\ndocument.body.appendChild(contentDiv);\n\nfirstReceivedH3.innerText = 'First Received';\nAllReceivedH3.innerText = 'All Successful';\n\ncontentDiv.appendChild(firstReceivedH3);\ncontentDiv.appendChild(ulFirstReceived);\ncontentDiv.appendChild(AllReceivedH3);\ncontentDiv.appendChild(ulAllReceived);\n\nconst baseURL = 'https://mate-academy.github.io/phone-catalogue-static/api';\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 500);\n\nconst getData = (url) => {\n  const fetchResponse = fetch(url, { signal: controller.signal })\n    .then((response) => {\n      if (!response.ok) {\n        Promise.reject(Error(`${response.status} - ${response.statusText}`));\n      }\n\n      if (!response.headers.get('content-type').includes('application/json')) {\n        Promise.reject(Error('Content-type is not JSON'));\n      }\n\n      clearTimeout(timeoutId);\n\n      return response.json();\n    });\n\n  return fetchResponse;\n};\n\ngetData(`${baseURL}/phones.json`).then(result => {\n  const phonesIDs = result.map(phone => phone.id);\n\n  getFirstReceivedDetails(phonesIDs);\n  getAllSuccessfulDetails(phonesIDs);\n});\n\nconst getFirstReceivedDetails = (phonesIDs) => {\n  const allPromisses = phonesIDs.map(phoneID => {\n    const phoneData = getData(`${baseURL}/phones/${phoneID}.json`);\n\n    return phoneData;\n  });\n\n  Promise.any(allPromisses).then(firstResolved => {\n    const li = document.createElement('li');\n\n    li.innerText = `${firstResolved.id} --- ${firstResolved.name}`;\n    ulFirstReceived.appendChild(li);\n  });\n};\n\nconst getAllSuccessfulDetails = (phonesIDs) => {\n  const allPromisses = phonesIDs.map(phoneID => {\n    const phoneData = getData(`${baseURL}/phones/${phoneID}.json`);\n\n    return phoneData;\n  });\n\n  Promise.all(allPromisses).then(resolvedPhones => {\n    resolvedPhones.map(phone => {\n      const li = document.createElement('li');\n\n      li.innerText = `${phone.id} --- ${phone.name}`;\n      ulAllReceived.appendChild(li);\n    });\n  });\n};\n"]}